// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
