// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eOXXoc1zcyX4o/31/j8BAAD//2iMeZwPQQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
