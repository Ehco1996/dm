// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+Rc3W7bOPZ/FUL//8Xuwo4/mzS+m2lmigLTnaIpMAsMsgZNHtucUKRCUkk9ha/3DfZ+",
	"se82z7EgKcmURDlKmsy2s72pK5Hnmz+ec0j1U0JkmkkBwuhk8SnRZAspdj+/U0qqn5jZvgWt8QbsMwqa",
	"KJYZJkWySGQGCtvfCOzYZJBkyj4zDBwF93RJJI3Mde+QezdIzC6DZJEwYWADKtkPiqmp3nTNTAuhqsna",
	"KCY2yX5fPZGrX4AYS+01mEuZKwI/MG3eg86k0E6murwUG2z/ZgZS9+D/FayTRfJ/o4ORRoWFRp5gcmCH",
	"lcI7929pMLfTm2rtB4mCm5wpoMni52LcwLO9iov9AevrJxTakvs9RL402OT6qSydrw40n1X6HySmBZtW",
	"2Gn3HMk14hJTlAtmWgG/ZoLpLdDlameKJ1Kl2HiZTufRUE/B4OWKCS43gQ5lONfeLzeG0eigTMmNAq2j",
	"L53eD5CpYbaGVnV6Aeu6KhHBYyZ/l6sYtCjgeIe43CDCAYs8Q5nkjOwQkWLNNrnHnTbifMyYKkIM1jjn",
	"JlmMB00AsYM8bhmWgnVpxS4ZtM0jcs7xikOyMCqHmAvtT3XrY7DiOzsdt1h/2AIqByMjUQaKScoI5nyH",
	"yBbINWJrZLZwkAgxjbxadIAK4ugW8xwWyLFATCANRAqqHye9ghQzsdQZJlDTYPKiKf9bJliap2itABBl",
	"+hq5WU6G198+hn0Mrt9b3e9fh6HT6mGQYm1ABYuqTiLPtFGAU+QHoDXj1i1edh9W8BGnmZU6+VO60zd8",
	"uGLiZGz/TAZocn52/uf2zjOo860Wa5356w9vLqz01smlIDWGcI4nazKdDoGMXw4nEzgfrqaYDMfT+RST",
	"yWQ8Hs8Wk+HZy/l5TAZnleMieMORXCkQBlmBnl4Agg3ZLvNs6W3SFuJuC2YLyq4CNxblGbpjZlsZBQXA",
	"UjBZSWnR4MCFsghla1nKFBAj1Q7dbUFBe0lpIy28hXqfjHS+ciQjWmkTTYFKI/qorJF7nwthJ8cylBBe",
	"68EaDaJQ3ZiHu4xeih0D3ksguWJm19bJbo9Iu/QGac3rkDtwplwz4BTdMc7RCtCWUQrCWlqgDRjDxMaN",
	"CgnViKC1kqkb4sBwbYGnDRX1Na01XxK8JFIYECbiCTt0zQg24Bd0OTL0SdSzljAo0036+4CcXbrvvnuL",
	"PFiM/vZifF78RoEEuhfXa9h1M3114GcNlSl2a1W7hl2JVyhgfg+/GMpebrGiTGxeK5lnkRSN8iVn2tTS",
	"tHZq0UjF1kxps+SSeCCNTdE7QYA+jKzBagMmOjQXDyfYzAs99cFB55YildgBw+iq8lVBe9fyz1v5irAB",
	"H8B0sfOuMdcw6EbMXIPDbZdD5HYVOjTQfmHFtpWCYhtIt1KbLnkRprRA4EN0TaZnJ+OT8ckkFtYZ1vpO",
	"KtpJsRpQJzmbvziN0pOqWzr3MqAzm41PYwmODqDuaKFRjrNzHIulwGmnN5F7GerhU4Vx1DK5ju2CBSX7",
	"skVNSWnu3T1COQtnFlYrWAY+GdTirTt8O1OvYk8o97poLLud6EHB7CcG2/M6F6SZh3XGr9/5dCXyMQeH",
	"ieXn+VhBxhnBHb6+k+oaVAdhWwP4AWUKxndoJXNBrTEs1ldgceDqJwwnD4yHUJBB3UNR9xusjDPSe7jJ",
	"IQYMmPjCSSKZgUC4cJsqxjeDIivLu2Nu8TVgv9xVWxFtghHLo1GVRD02m+0oVzrS647IKUW0+7Qd0kfM",
	"RpUx7S9LlQMXyy05GfkXnsXn5Mb3SnA00Isgb62g3rEcUo+Ga60x1MpguMS0JzAEjZ/9IImrY7C+LpVp",
	"JzX9oeQRpcWmCiErRH2TyONFhk9Yeqp/uRPkoL5rbcXVt6+Q4xTKYDlFtzyhQEt+C3TpMitJrpcd/asH",
	"BNLxmCkGHYNBb+9Cz2hcHcxxpP1gtUZ5HmkDFujg6UaUXVlLMLGxVomxKBJzdHHxA7rbMrKtanWmUTk5",
	"GTwgf241RHq2LiKQQ0CYpcn6djeLztRyBVsmaNAN6DO3Suzb2757d1Sj2ohujXwzE27LE5Aecvkp/W0Q",
	"rIONLbaO+dwPaLgdK0C5GJZUQtcfXda1Cu/eKig0RKhkzeuDfv2Kunuizmiug5idgrIrXFRdYRVbzO7I",
	"I4pmkQx2iwWBpRScCVh6My7JFotNvTHqd8P7ElqdZzYRtxW6w25PFlHKUcbzDavlt7UNNohz54/lmnFr",
	"Y5XzCDwWXUw3EvmRyI5E2hW1vQ+GvrMEvnfz31tGMRwBgwu71HMOmg7tu1a+QeWdKJIeig1eYQ3OHjbF",
	"sOFuJ3W2Xg9EW6v2/i36QMY+HUbzdCmWNHeJfNmtqNPbyjvrzy0W1HeA1pwRA9Tp4hLqPLVLR96CulPM",
	"OL7uKPQqmq6l8haWTqWH1Ed+njdVZUQmUMS2fSLKQc0yjZ7K2jC9wzvXlJXSggc2YPehQNkMtGYp04bZ",
	"TV9mpvzHVXde5Lt/fYLQV6Cv/HjX+bElS8o2ChvoWABuDCrGuNB/SNh/sLPf+sldce87RA9Q44ObcIEN",
	"/ta6xZHQ1x1WLyVP/Wl4aeh1zrlVRBAFKQh/dok5t4Y+RDd2g3olRQcRBsexrrUymhaI+qXp7S40buJM",
	"rN9qwMGDpasRNuVJDYdb4C3cZhshFfitK3JfwOFisW9UUXFkTM22iKY8Bh3NCClk0Dc8srnfcJRhY0C5",
	"wtlDdLcwXcMPcv39Qsmsj1TWfh1Jtdsh2j2nnEOPyuxAt8vJtXXcURENbdVp4fT4oa5dB1Wk2aGRWql2",
	"uiDXyM6pEMHGfbtfZTEzfoBkNydbc1EWqV5PRvDRbuu2qMHxzckPWJqtAkzrh9HzJs47Qf0EKzeRokj6",
	"opkkSzspT06jpP2Me0nHDggs8DzU7gFYdZhdQcaXK2zIti5++7A8pGXTwK2Sgv1asXI0EHwEkrtHdtnc",
	"5FgY5ljFT7oz3tN4TUUeZcEADzu7As3Yr0AhWlOWZcwhHsezNRlPT2fD6UtyNpxM4GyIT1/MhqdkvHo5",
	"py/O17PxYjI8G88n8+lsMH4xP5vTGQmGv5y9mA6n4xldTeenlM7oYjKcnI1jkd3oex2k8C+KE/IjMzOp",
	"axPn0brvefqyRzqlMRQ7WiyFnu2CwFZi0X0RwWcwRoY5XZjPRLrtYV0Qt1RYChTmqoLrfsRvbyb66NlW",
	"TzAPi4caEffcyTlAd4xTghUtS6h6VbAa/uUzW3BB68rL3tWaM777GU84e8hqorIebdkXBip5RyOzOg3t",
	"Krae0hlUgkZCmqqeLTXWDbdMHmnBngzMqseavs94UdNX6e2RpVxL549Y/lChHTf913js+vynrs90SHr8",
	"WDTm9J9cx/ivOIXOk7DiyEujcq0ZWZzrtdH6v3lOsncZqa0mML+QJFJwXLxFP2Ygvnn3Bl38+MpaSPFk",
	"kWyNyfRiNKKS6JOMiQ3B2QmR6ejX7cgwuhraUB/6bYpJMdJ+0bnMcS1ds5UZp0nA4Ld//uO3f/07GSS3",
	"oLRnPz0Zn5y6dkwGAmcsWSQzG+rOR2brBB7hjI1uJyMfCu5RAYHVJfQ31HH65t2b2nVv177095DdtOl4",
	"bP8K7t3grCp0R79o3wc6IOOx0I3fK3cW775S5S6Y2CE6T1OsdsnCqoJaQywobXSAUlduYeourV8pwAYu",
	"S0QrwvNbSXdPpm95572tYMENrSy7fcvkk8iizgmxGLcfJPMndEnrq4WIsGvMONCGD4gzHxJwF7oi5oX9",
	"oBmOo09BHrH3unIw0OGpC/ey8lSGFU7BWNxY/Nw004bLlbsdnAt2k9fv1JVJnR1nV0pS9kUbac0BK3xP",
	"8GDJPldX9lctd86/fHd6ByD8uc4cudP8YXWrJSsr14hfD9cnvhavPgNEtK6Q7OvblRV2H8fkLzuiOq8p",
	"VQc8TxBqxZlzj73tsrqF9eUE2tHq++oZN+KaSSIO/dJiyW74NmLq18fLSx6fH0cy64tYMvsfB6x2pv9H",
	"ASzK9NMhlm/m3gdN5eeKz5x0t76KjJjENW19rv0lLfpKqoO53V2Ee5J7t61+8JcWnmMV+A9D/8B5PRYU",
	"uVSuvELXsH4z1Eef3LWBhyT0hXsehKPhjYUIgFYy9ITPrqsOX3cO71wns0d4rm9KFVwj/Woc+OSI2vho",
	"+2tJo6wDqk8SmrHh+pDqtvRlvbG1k/kJlSlmwrW1EmvkgkDn9zvHO2lUks9sn41uckauh77q9Ng11NV/",
	"NVDLq5L9oONa2+8kZCFe9XZoiv9eIAj+ZH+1/08AAAD//7wVIgVlQgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
