// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
