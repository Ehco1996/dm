// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
