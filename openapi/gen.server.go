// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9tAlj7OUMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
