// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get doc json
	// (GET /api/v1/dm.json)
	GetDocJSON(ctx echo.Context) error
	// get doc html
	// (GET /api/v1/docs)
	GetDocHTML(ctx echo.Context) error
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string, params DMAPIDeleteTaskParams) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDocJSON converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocJSON(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocJSON(ctx)
	return err
}

// GetDocHTML converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocHTML(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocHTML(ctx)
	return err
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIDeleteTaskParams
	// ------------- Optional query parameter "source-name-list" -------------

	err = runtime.BindQueryParameter("form", true, false, "source-name-list", ctx.QueryParams(), &params.SourceNameList)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name-list: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName, params)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/dm.json", wrapper.GetDocJSON)
	router.GET(baseURL+"/api/v1/docs", wrapper.GetDocHTML)
	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
