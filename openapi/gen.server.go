// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
