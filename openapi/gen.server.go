// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Tq4ZfbK72f0nAAD//wN+4KoUPwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
