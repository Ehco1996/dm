// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get doc json
	// (GET /api/v1/dm.json)
	GetDocJSON(ctx echo.Context) error
	// get doc html
	// (GET /api/v1/docs)
	GetDocHTML(ctx echo.Context) error
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string, params DMAPIDeleteTaskParams) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDocJSON converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocJSON(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocJSON(ctx)
	return err
}

// GetDocHTML converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocHTML(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocHTML(ctx)
	return err
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIDeleteTaskParams
	// ------------- Optional query parameter "source-name-list" -------------

	err = runtime.BindQueryParameter("form", true, false, "source-name-list", ctx.QueryParams(), &params.SourceNameList)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name-list: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName, params)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/dm.json", wrapper.GetDocJSON)
	router.GET(baseURL+"/api/v1/docs", wrapper.GetDocHTML)
	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+Q8W2/bONZ/hdD3Pewu7NhO0qT127SZ6XbRzhRNgFlgkTVo6tjmhCIVkkrqKfzfF4fU",
	"XZStpMlMu9uXJhJ57ndS+RIxlaRKgrQmmn+JDNtAQt2PbzRQC1fU3HyC2wyMxYepViloy8Et0ZCoO1gk",
	"YCn+GsOKZsJG8xUVBkZRDIZpnlquZDSP7jdgN6CJVcTvI7iPxNTSJTVAuCSxupfGaqBJ+TgaRXabQjSP",
	"lkoJoDLajSKjMs1gIWkCC8E9Zf+vYRXNo/+bVAxNcm4ml279zzSB97h6N4osNTeHdiHr0W43ijTcZlxD",
	"HM3/1WA5B3NdkqiWvwFz8H/UWulfud18AGPoGrx46uJAOVL8mQCujUYt2bqnC6biwF73jrh3JW4uLaxB",
	"I3K/NTHrvp1JTlS52VjN5brDbAVoVKcnxPBbsF7KKOFPYFIlDXQtBtWK/3MLiRmmNqcuj45qTbfud2Wp",
	"wO1t5lsM+HUjj3Yv2ZeW2sw8KeEe5HOTj1b6hDL3Rv/8JD+tvLNlBfNZqX+vaJyj6fiWcc+JWhGhaEwy",
	"yW3Hq1dccrOBeLHc2vyJ0gm1nqaz06A/Y7BZLLkUal3jofDZxvvF2vI4uCjVaq3BmOBLx/cDaGqJrcVV",
	"E14NdZOVAOEhkX/MdCh+ahB0S4RaE4ZpIUtJqgRnW8KUXPF15oNrN6x+TrnOTaxIV9N2qnKLfHC2PAFU",
	"aYkuGnXFIzMh6FJANLc6g5AK8Ud9522wxHtyNu2gvtpgJvSLMVWmoLmKOaNCbAnbALshfEXsBiqKCDfE",
	"sxWPSA6c3FGRwZw4FJhaDTAlY/M46jUklMuFSSmDBgezF236P3DJkywhKw1AYm5uiNvlaHj7+jHodwGb",
	"+IS8H/bDutKaZpBQY0HXnKoJIkvzMsQvICsuUC2edm9W8JkmKVId/SXZmlsxXnJ5NMV/sxGZvTp/9ddu",
	"eh018ZbO2kT+9urdBVKPSi4IaSCEV3S2YsfHY2DTl+PZDF6Nl8eUjafHp8eUzWbT6fRkPhufvzx9FaLB",
	"SWU/CV5wLNMapCVI0NMTwKhlm0WWLrxMukTUCka3lmQpued2UwqF1AJLt0j0WGIegIySjbkGZpXekvsN",
	"aOi6lLEKw1ud76OJyZYOZIArY4N1XiFEb5UNcJ8yKXHzoTKsaaxBI6qzG9Jwn9ALskOB9xJYprnddnnC",
	"9Eh8EU6MEc2QO3KiXHEQMbnnQpAlkA2PY5AoaUnWYC2Xa7eqDqgBhKy0StwSFwxXGHi6oaLp0wy0XVAh",
	"1D3ECya7ZL9RSaIkwT4A/evy8j3BPXzFGfWZqqw2uhmyVVEYIxaMLpiSFqQNqL0C7KNHsbJuAEEzQsDI",
	"SS/on2rgkI+PP34gPjJN/vli+ir/uc3aYaw3sO1H+qbCh1pJNb9D1m5gWwRHUkN+AF/LvluyDMigS2DQ",
	"YDdUx1yu32qVpYGSMhZltzhc0SuujV0IxXzgD20xW8kgfhhYS/UabHBpJh8OsF3HeuijiucOIyXZNYRB",
	"ofomrJtl/fNOfSXRQWtpZeBIIDPg8oyreTKMGi56GR8IQmkwh9gN/BtlbB+9hMZxnjEqA50dnx9Nj6ZH",
	"s5BnpNSYe6XjXojlgibIk9MXZ0F4SvdT517W4JycTM9CBVla1MT7uiJfOKN91gL53jaqWNccsfRS617W",
	"ufaF0DQox8yEcnwOCV92oGml7OHYUaMzV30u4xxlTYOjhnX2G3s5KNrHOMndqvTQinC/ahwUQzsONEYF",
	"ffjK2iE0Ijo85/F516gE7AYz771WoaqjqBFMScw+Y6mX4F9nLxpSwRntsZt7pW9A9wDGbskvKIpVsSVL",
	"lckY4wgmqjJMVVj9hpB69tpWnZCg7ViqrZNKbV7aJJcy31Mq1Ki2hOYVp843jDrz1YOVugOESg11DaQs",
	"GR9bu/c0Zz3NRI/2CxKxUJB58XWIzFZPdTyclrLizzNPdDTxLzyKr+kEDlJQs5FBg+lf3fpqMN0ywA64",
	"sN2pdLjZqfSg1f0pTDQmeJ3STSgaD4xLtQndbhSFLdJSc1NEo241NzySPaIHXJfW784OGvkuC3eDvlIb",
	"yP7lVrKKfTeDDLOPr4jDVKcBMQWzt9RglLiDeOFKSsVuFj2Dxr0BOw/WYfm1DCdf1B+FC3nnfAbtqhLH",
	"njkRck2yLDCvzQObhxtgdomS4HKNUgmhyDsScnHxntxvONuUQxVuSLH5QY1nZ3I1cMYUiJYMpF3YdOgY",
	"Oh8hLpaw4TKujW2G7C07msBpHr7by1FjRT9HfuoMd8Vh5gC6/JbhMqj5wRq7zH069wtaaqcaSCbHBZS6",
	"6ve6daO1Pdj+1QVRZ7Kh9dGwwVJTPUFltP0gJKdav1l3qj6zCjnzVX5o241mfX674gIZ0pkIxKJqtmtB",
	"E1xDDNihGkFiXnP5Xq1/cgA+IY6Av4LcUMlgoaTgEhZ++4JtqFw3Z+m+pOhtkH3rQkyWYndDVkq7LOLB",
	"kjgWJBXZmjdG040qpeZx7tzFU9IsleJknJ9stwZ+3YN5RwFWRmjq7iS/bz5eAe147OH0XIHBp+GeSslF",
	"nLkewgagbdQ9ym9DZeznZivBmYXYceJ6wixBp1F3oO81t1AcdtdssBaK0BEXSfBYHvVxT7duYK0U+iu1",
	"gKG/hiUFY3jCjeWYZ1Vqi1+u+0sRPxkdYpC+m3zj17spE7a7CV9raqHHDdwakq9xbvAQF7jC3R/85j4X",
	"8NOoB7Bx5TZcUEtfUwPFfY0eqReUJ/46RCHoVSYEMiKZhgSkP9elQqCgK6OibtGgOqQi4YBTtwyyzX9Q",
	"K21d94W/TsQJTYctOKdEwIZQWxxiCbgD0YmUfC2VBp8sAnMEfFyUiaVR7FnTEC2JEzFkCJLTYG5FIJ3e",
	"CpJSa0G7DsZH635i+pZXdP37Qqt0CFUov54y1iWL7sAqEzBgrFDB7dPyT5kQuU+hLwcaisZZiVoRtPbS",
	"h9FSu9MiDHfh4zCM4tiYxFx3mTqawGfMOFj503AU9wsWdqOBxs2j9dN2JnGE+g1IN1Myr4yC5RZPeiHP",
	"zoKg/Y6DoHc9kn8nmX6Y5GsBpkfwGlKxWFLLNk0Guof/dVhYLW20kvz3EpWDQeAzsMw9Qlu/zai03KEK",
	"n9ynYqD42ow8WoZVEuo28q0SvjKz6cmKTY/PTsbHL9n5eDaD8zE9e3EyPmPT5cvT+MWr1cl0PhufT09n",
	"p8cno+mL0/PT+ITVlr88eXE8Pp6exMvj07M4Ponns/HsfBoy2Na4qqLCv8iP8ffsTFVz5Hsa7HmeZyS6",
	"Z0h5fVAjfN1HyliDoFgW7b8/g05Wpi6W6/hQPm/Hs53Pyw+G0/bOZonUK+Q2R4OLm5olH2q56nT0qaFT",
	"K/XfO/FFmVX1K7H1Ei1wGIBZuGh4wjZX73RywwucXvRlscAZ+N6jwYEGVW9DGkDcc0fniNxzETOq46L9",
	"afYXy/HfvnKQ1zm76RvwWT/+DdfQA2i1QVr3njvkAipwh4yrOkzua9ueUhmxAkOksmUvWnBsWmqZPVKC",
	"AxHY5YDoeEh4QdGXNfseV250KHskXzXM+0X/PZ5aP+zQ+jHH0M90arz/nDik9NYhx77B9p6T4f6jx056",
	"cXU1tjFUXCgW6HQuPpBfUpA/fHxHLn55g2xoEc2jjbWpmU8msWLmKOVyzWh6xFQy+X0zsTxejtEexz6X",
	"cCUnxnuGS8kr5eaq3DpiOwjuQBuP+/hoenTmRi8pSJryaB6doDE6KdqNo3ZCUz65m03i5Og342/O5EGq",
	"/PThXRzNo7dgLxT7x+UvP7vxpL8Q7iAcT6ddthFWeZkKpWSyJKF6G80RPIkVIw4duvDaoLJjxaJrXFlS",
	"lMtzDzl/v/rwfhA5uPAAORvru+A+crw191N08eGHj+8a31f0UFa7vEVTP35ADRfSr4L7Pu8Lf8jh7LH/",
	"EqAoDv5a3LeXVFLIA+21iy2mj2v/DdJlEZTzE8vXKt4+Gb/FRyZdBnNsZInodh2Rz/4AEkzGGMb93Sg6",
	"fUIdd75OCqBeUS4gbimVOX0QCfd13YbU2rXvyZdabbXzniTAT2wDqr9wL0vVp1TTBCxoRNN2wrVQS3dB",
	"PpP8NmteKy0KXVyHsSkqps6tUq9KD35qXklyyP2m3XXHPk4DeesbU6dXAKFfq8yJu+LhakznmGkx7Ajo",
	"tbom871o9RliTueq0K5ZoSCxuyHp51uzqPyUqro+s8qkv31SHFg9ganlp/kDkuVleXHu2zG0vbOd6z8i",
	"s7e+vfsO8g4WE2g8zY8pips0X29SKh0avPK7Vv/Lsat13ey/JXTF3Dxd7PInAYeCVPHt7jPX851PhAMi",
	"cRN/kX8d/+34fElVJW7/zf3+vsEl2Ct/MeQ5nKD7txH+zP4h/0MF30v3QGWc33/Or+60NNt2o8kXd/Xj",
	"IW1DrvoHhej6rZNAbC5pGBiZ+66r7EZDPirA57cZ6G0wOYzzZRXer/oK4ftuXpw1qfQRxjS0lqzdTP5G",
	"ber6+RPId1o0ogLKz2fatuGG0vqu0GVzgLpV2VGsEsqlG59GKOQcQO+3cPsntrFiXzmmndxmnN2Mfbvt",
	"w+nYlH8lpREoom6gKW+c/yFE5uSVb8c2/9MiNeOPdte7/wQAAP//S3YWNYNIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
