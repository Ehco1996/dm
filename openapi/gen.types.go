// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

// Defines values for TaskOnDuplication.
const (
	TaskOnDuplicationError TaskOnDuplication = "error"

	TaskOnDuplicationOverwrite TaskOnDuplication = "overwrite"
)

// Defines values for TaskShardMode.
const (
	TaskShardModeOptimistic TaskShardMode = "optimistic"

	TaskShardModePessimistic TaskShardMode = "pessimistic"
)

// Defines values for TaskTaskMode.
const (
	TaskTaskModeAll TaskTaskMode = "all"

	TaskTaskModeFull TaskTaskMode = "full"

	TaskTaskModeIncremental TaskTaskMode = "incremental"
)

// Defines values for TaskSourceConfigFullMigrateConfConsistency.
const (
	TaskSourceConfigFullMigrateConfConsistencyNone TaskSourceConfigFullMigrateConfConsistency = "none"

	TaskSourceConfigFullMigrateConfConsistencySnapshot TaskSourceConfigFullMigrateConfConsistency = "snapshot"
)

// operation error
type ErrorWithMessage struct {
	// error code
	ErrorCode *int `json:"error_code,omitempty"`

	// error message
	ErrorMsg *string `json:"error_msg,omitempty"`
}

// status of load unit
type LoadStatus struct {
	FinishedBytes  *int64  `json:"finished_bytes,omitempty"`
	MetaBinlog     *string `json:"meta_binlog,omitempty"`
	MetaBinlogGtid *string `json:"meta_binlog_gtid,omitempty"`
	Progress       *string `json:"progress,omitempty"`
	TotalBytes     *int64  `json:"total_bytes,omitempty"`
}

// relay log cleanup policy configuration
type Purge struct {
	// expiration time of relay log
	Expires *int64 `json:"expires"`

	// The interval to periodically check if the relay log is expired, default value: 3600, in seconds
	Interval *int64 `json:"interval"`

	// Minimum free disk space, in GB
	RemainSpace *int64 `json:"remain_space"`
}

// status of relay log
type RelayStatus struct {
	// upstream binlog file information
	MasterBinlog string `json:"master_binlog"`

	// GTID of the upstream
	MasterBinlogGtid string `json:"master_binlog_gtid"`

	// relay current GTID
	RelayBinlogGtid string `json:"relay_binlog_gtid"`

	// whether to catch up with upstream progress
	RelayCatchUpMaster bool `json:"relay_catch_up_master"`

	// the directory where the relay log is stored
	RelayDir string `json:"relay_dir"`

	// current status
	Stage string `json:"stage"`
}

// data source ssl configuration, the field will be hidden when getting the data source configuration from the interface
type Security struct {
	// certificate file content
	SslCaContent *string `json:"ssl_ca_content,omitempty"`

	// File content of PEM format/X509 format certificates
	SslCertContent *string `json:"ssl_cert_content,omitempty"`

	// Content of the private key file in X509 format
	SslKeyContent *string `json:"ssl_key_content,omitempty"`
}

// ShardingGroup defines model for ShardingGroup.
type ShardingGroup struct {
	DdlList       *[]string `json:"ddl_list,omitempty"`
	FirstLocation *string   `json:"first_location,omitempty"`
	Synced        *[]string `json:"synced,omitempty"`
	Target        *string   `json:"target,omitempty"`
	Unsynced      *[]string `json:"unsynced,omitempty"`
}

// source
type Source struct {
	// whether to use GTID to pull binlogs from upstream
	EnableGtid bool `json:"enable_gtid"`

	// source address
	Host string `json:"host"`

	// source password
	Password string `json:"password"`

	// source port
	Port int `json:"port"`

	// data source ssl configuration, the field will be hidden when getting the data source configuration from the interface
	Security *Security `json:"security"`

	// source name
	SourceName string `json:"source_name"`

	// source username
	User string `json:"user"`
}

// source status
type SourceStatus struct {
	// whether to enable relay log function
	EnableRelay *bool `json:"enable_relay,omitempty"`

	// status of relay log
	RelayStatus *RelayStatus `json:"relay_status,omitempty"`

	// source name
	SourceName *string `json:"source_name,omitempty"`

	// The worker currently bound to the source
	WorkerName *string `json:"worker_name,omitempty"`
}

// action to open a relay request
type StartRelayRequest struct {
	// relay log cleanup policy configuration
	Purge *Purge `json:"purge,omitempty"`

	// starting GTID of the upstream binlog
	RelayBinlogGtid *string `json:"relay_binlog_gtid"`

	// starting filename of the upstream binlog
	RelayBinlogName *string `json:"relay_binlog_name"`

	// the directory where the relay log is stored
	RelayDir *string `json:"relay_dir"`

	// worker name
	WorkerName string `json:"worker_name"`
}

// SubTaskStatus defines model for SubTaskStatus.
type SubTaskStatus struct {
	// status of load unit
	LoadStatus *LoadStatus `json:"load_status,omitempty"`

	// task name
	Name *string `json:"name,omitempty"`

	// current stage of the task
	Stage *string `json:"stage,omitempty"`

	// status of sync uuit
	SyncStatus *SyncStatus `json:"sync_status,omitempty"`

	// task unit type
	Unit                *string `json:"unit,omitempty"`
	UnresolvedDdlLockId *string `json:"unresolved_ddl_lock_id,omitempty"`
}

// status of sync uuit
type SyncStatus struct {
	BinlogType *string `json:"binlog_type,omitempty"`

	// sharding DDL which current is blocking
	BlockingDdls        *[]string `json:"blocking_ddls,omitempty"`
	MasterBinlog        *string   `json:"master_binlog,omitempty"`
	MasterBinlogGtid    *string   `json:"master_binlog_gtid,omitempty"`
	RecentTps           *int64    `json:"recent_tps,omitempty"`
	SecondsBehindMaster *int      `json:"seconds_behind_master,omitempty"`
	Synced              *bool     `json:"synced,omitempty"`
	SyncerBinlog        *string   `json:"syncer_binlog,omitempty"`
	SyncerBinlogGtid    *string   `json:"syncer_binlog_gtid,omitempty"`
	TotalEvents         *int64    `json:"total_events,omitempty"`
	TotalTps            *int64    `json:"total_tps,omitempty"`

	// sharding groups which current are un-resolved
	UnresolvedGroups *[]ShardingGroup `json:"unresolved_groups,omitempty"`
}

// task
type Task struct {
	// task status checker configuration
	CheckerConfig *TaskCheckerConfig `json:"checker_config,omitempty"`

	// whether to enable support for the onlineddl plugin
	EnhanceOnlineSchemaChange *bool `json:"enhance_online_schema_change"`

	// binlog event filter rule set
	EventFilterRule *[]TaskEventFilterRule `json:"event_filter_rule,omitempty"`

	// downstream database for storing meta information
	MetaSchema *string `json:"meta_schema,omitempty"`

	// task name
	Name *string `json:"name,omitempty"`

	// how to handle conflicted data
	OnDuplication *TaskOnDuplication `json:"on_duplication,omitempty"`

	// the way to coordinate DDL
	ShardMode *TaskShardMode `json:"shard_mode"`

	// task configuration list of upstream data sources
	SourceConfig *[]TaskSourceConfig `json:"source_config,omitempty"`

	// table migrate rule
	TableMigrateRule *[]TaskTableMigrateRule `json:"table_migrate_rule,omitempty"`

	// downstream database configuration
	TargetConfig *TaskTargetDataBase `json:"target_config,omitempty"`

	// migrate mode
	TaskMode *TaskTaskMode `json:"task_mode,omitempty"`
}

// how to handle conflicted data
type TaskOnDuplication string

// the way to coordinate DDL
type TaskShardMode string

// migrate mode
type TaskTaskMode string

// task status checker configuration
type TaskCheckerConfig struct {
	// sets the longest time interval for the automatic recovery after errors are detected.
	BackoffMax *string `json:"backoff_max,omitempty"`

	// sets the time interval for adjusting the waiting time of the automatic recovery.
	BackoffRollback *string `json:"backoff_rollback,omitempty"`

	// determines whether to enable task status checker
	Enable *bool `json:"enable,omitempty"`
}

// Filtering rules at binlog level
type TaskEventFilterRule struct {
	// event type
	IgnoreEvent *[]string `json:"ignore_event,omitempty"`

	// sql pattern to filter
	IgnoreSql *[]string `json:"ignore_sql,omitempty"`

	// rule name
	RuleName *string `json:"rule_name,omitempty"`
}

// source-related configuration
type TaskSourceConfig struct {
	// configuration of full migrate tasks
	FullMigrateConf *struct {
		// consistency level at full export
		Consistency *TaskSourceConfigFullMigrateConfConsistency `json:"consistency,omitempty"`

		// storage dir name
		DataDir *string `json:"data_dir,omitempty"`

		// full export of concurrent
		ExportThreads *int `json:"export_threads,omitempty"`

		// full import of concurrent
		ImportThreads *int `json:"import_threads,omitempty"`
	} `json:"full_migrate_conf,omitempty"`

	// configuration of incremental tasks
	IncrMigrateConf *struct {
		// incremental synchronization of batch execution sql quantities
		Batch *int `json:"batch,omitempty"`

		// incremental task of concurrent
		ReplThreads *int `json:"repl_threads,omitempty"`
	} `json:"incr_migrate_conf,omitempty"`

	// source configuration
	SourceConf *[]struct {
		BinlogGtid *string `json:"binlog_gtid,omitempty"`
		BinlogName *string `json:"binlog_name,omitempty"`
		BinlogPos  *int    `json:"binlog_pos,omitempty"`

		// source name
		SourceName *string `json:"source_name,omitempty"`
	} `json:"source_conf,omitempty"`
}

// consistency level at full export
type TaskSourceConfigFullMigrateConfConsistency string

// upstream table to downstream migrate rules
type TaskTableMigrateRule struct {
	// filter rule name
	EventFilterName *[]string `json:"event_filter_name,omitempty"`

	// source-related configuration
	Source *struct {
		// schema name, wildcard support
		Schema *string `json:"schema,omitempty"`

		// source name, wildcard support
		SourceName *string `json:"source_name,omitempty"`

		// table name, wildcard support
		Table *string `json:"table,omitempty"`
	} `json:"source,omitempty"`

	// downstream-related configuration
	Target *struct {
		// schema name, does not support wildcards
		Schema *string `json:"schema,omitempty"`

		// table name, does not support wildcards
		Table *string `json:"table,omitempty"`
	} `json:"target,omitempty"`
}

// downstream database configuration
type TaskTargetDataBase struct {
	// source address
	Host *string `json:"host,omitempty"`

	// source password
	Password *string `json:"password,omitempty"`

	// ource port
	Port *int `json:"port,omitempty"`

	// data source ssl configuration, the field will be hidden when getting the data source configuration from the interface
	Security *Security `json:"security"`

	// source username
	User *string `json:"user,omitempty"`
}

// requests related to workers
type WorkerNameRequest struct {
	// worker name
	WorkerName string `json:"worker_name"`
}

// DMAPICreateSourceJSONBody defines parameters for DMAPICreateSource.
type DMAPICreateSourceJSONBody Source

// DMAPIStartRelayJSONBody defines parameters for DMAPIStartRelay.
type DMAPIStartRelayJSONBody StartRelayRequest

// DMAPIStopRelayJSONBody defines parameters for DMAPIStopRelay.
type DMAPIStopRelayJSONBody WorkerNameRequest

// DMAPIStartTaskJSONBody defines parameters for DMAPIStartTask.
type DMAPIStartTaskJSONBody Task

// DMAPICreateSourceJSONRequestBody defines body for DMAPICreateSource for application/json ContentType.
type DMAPICreateSourceJSONRequestBody DMAPICreateSourceJSONBody

// DMAPIStartRelayJSONRequestBody defines body for DMAPIStartRelay for application/json ContentType.
type DMAPIStartRelayJSONRequestBody DMAPIStartRelayJSONBody

// DMAPIStopRelayJSONRequestBody defines body for DMAPIStopRelay for application/json ContentType.
type DMAPIStopRelayJSONRequestBody DMAPIStopRelayJSONBody

// DMAPIStartTaskJSONRequestBody defines body for DMAPIStartTask for application/json ContentType.
type DMAPIStartTaskJSONRequestBody DMAPIStartTaskJSONBody
