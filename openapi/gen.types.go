// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package openapi

// Defines values for BinlogEventFilterRuleAction.
const (
	BinlogEventFilterRuleActionDo BinlogEventFilterRuleAction = "Do"

	BinlogEventFilterRuleActionIgnore BinlogEventFilterRuleAction = "Ignore"
)

// Defines values for TaskIgnoreCheckingItems.
const (
	TaskIgnoreCheckingItemsAll TaskIgnoreCheckingItems = "all"

	TaskIgnoreCheckingItemsAutoIncrementID TaskIgnoreCheckingItems = "auto_increment_ID"

	TaskIgnoreCheckingItemsBinlogEnable TaskIgnoreCheckingItems = "binlog_enable"

	TaskIgnoreCheckingItemsBinlogFormat TaskIgnoreCheckingItems = "binlog_format"

	TaskIgnoreCheckingItemsBinlogRowImage TaskIgnoreCheckingItems = "binlog_row_image"

	TaskIgnoreCheckingItemsDumpPrivilege TaskIgnoreCheckingItems = "dump_privilege"

	TaskIgnoreCheckingItemsReplicationPrivilege TaskIgnoreCheckingItems = "replication_privilege"

	TaskIgnoreCheckingItemsSchemaOfShardTables TaskIgnoreCheckingItems = "schema_of_shard_tables"

	TaskIgnoreCheckingItemsTableSchema TaskIgnoreCheckingItems = "table_schema"

	TaskIgnoreCheckingItemsVersion TaskIgnoreCheckingItems = "version"
)

// Defines values for TaskOnlineDdlScheme.
const (
	TaskOnlineDdlSchemeGhOst TaskOnlineDdlScheme = "gh-ost"

	TaskOnlineDdlSchemePt TaskOnlineDdlScheme = "pt"
)

// Defines values for TaskShardMode.
const (
	TaskShardModeOptimistic TaskShardMode = "optimistic"

	TaskShardModePessimistic TaskShardMode = "pessimistic"
)

// Defines values for TaskTaskMode.
const (
	TaskTaskModeAll TaskTaskMode = "all"

	TaskTaskModeFull TaskTaskMode = "full"

	TaskTaskModeIncremental TaskTaskMode = "incremental"
)

// binlog 级别的过规则
type BinlogEventFilterRule struct {

	// Do 白名单 Ignore 黑名单
	Action *BinlogEventFilterRuleAction `json:"action,omitempty"`

	// 匹配哪些 event 类型
	Events *[]string `json:"events,omitempty"`

	// 过滤规则名
	RuleName *string `json:"rule_name,omitempty"`

	// 数据库名规则
	SchemaPattern *string `json:"schema_pattern,omitempty"`

	// 数据表名规则
	TablePattern *string `json:"table_pattern,omitempty"`
}

// Do 白名单 Ignore 黑名单
type BinlogEventFilterRuleAction string

// 操作错误
type ErrorWithMessage struct {

	// 错误码
	ErrorCode *int `json:"error_code,omitempty"`

	// 失败原因
	ErrorMsg *string `json:"error_msg,omitempty"`
}

// load 单元子任务的状态
type LoadStatus struct {
	FinishedBytes  *int64  `json:"finished_bytes,omitempty"`
	MetaBinlog     *string `json:"meta_binlog,omitempty"`
	MetaBinlogGtid *string `json:"meta_binlog_gtid,omitempty"`
	Progress       *string `json:"progress,omitempty"`
	TotalBytes     *int64  `json:"total_bytes,omitempty"`
}

// relay log 清理策略配置
type Purge struct {

	// relay log 的过期时间，默认值为 0，单位：小时。未由 relay 处理单元进行写入、或已有数据迁移任务当前或未来不需要读取的 relay log 在超过过期时间后会被 DM 删除。如果不设置则 DM 不会自动清理过期的 relay log。
	Expires *int `json:"expires"`

	// 定期检查 relay log 是否过期的间隔时间，默认值：3600，单位：秒
	Interval *int `json:"interval"`

	// 设置最小的可用磁盘空间。当磁盘可用空间小于这个值时，DM-worker 会尝试删除 relay log，默认值：15，单位：GB
	RemainSpace *int `json:"remain_space"`
}

// relay log 的状态
type RelayStatus struct {

	// 上游 binlog file的信息
	MasterBinlog *string `json:"master_binlog,omitempty"`

	// 上游 binlog 的 GTID
	MasterBinlogGtid *string `json:"master_binlog_gtid,omitempty"`

	// relay 当前的 GTID
	RelayBinlogGtid *string `json:"relay_binlog_gtid,omitempty"`

	// relay log 是否追上上游的进度
	RelayCatchUpMaster *bool `json:"relay_catch_up_master,omitempty"`

	// 存储 relay log 的目录
	RelaySubDir *string `json:"relay_sub_dir,omitempty"`

	// 当前状态
	Stage *string `json:"stage,omitempty"`
}

// 数据源 ssl 配置,从接口获取数据源配置时，该字段会被隐藏
type Security struct {

	// 根证书文件内容
	SslCaContent *string `json:"ssl_ca_content"`

	// PEM格式/X509格式证书的文件内容
	SslCertContent *string `json:"ssl_cert_content"`

	// X509格式的私钥文件内容
	SslKeyContent *string `json:"ssl_key_content"`
}

// ShardingGroup defines model for ShardingGroup.
type ShardingGroup struct {
	DdlList       *[]string `json:"ddl_list,omitempty"`
	FirstLocation *string   `json:"first_location,omitempty"`
	Synced        *[]string `json:"synced,omitempty"`
	Target        *string   `json:"target,omitempty"`
	Unsynced      *[]string `json:"unsynced,omitempty"`
}

// 数据源
type Source struct {

	// Binlog event filter 标识符是否大小写敏感。
	CaseSensitive *bool `json:"case_sensitive,omitempty"`

	// 是否使用 GTID 方式从上游拉取 binlog
	EnableGtid *bool `json:"enable_gtid,omitempty"`

	// 数据源地址
	Host *string `json:"host,omitempty"`

	// 数据库密码
	Password *string `json:"password,omitempty"`

	// 数据源端口
	Port *int `json:"port,omitempty"`

	// 数据源 ssl 配置,从接口获取数据源配置时，该字段会被隐藏
	Security *Security `json:"security"`

	// 数据源名字，需要全局唯一
	SourceName *string `json:"source_name,omitempty"`

	// 数据库用户名
	User *string `json:"user,omitempty"`
}

// 数据源的状态
type SourceStatus struct {

	// 是否开启 relay log，默认值为 false
	EnableRelay *bool `json:"enable_relay,omitempty"`

	// relay log 的状态
	RelayStatus *RelayStatus `json:"relay_status,omitempty"`

	// 数据源 ID
	SourceName *string `json:"source_name,omitempty"`

	// 当前 source 绑定的 worker
	WorkerName *string `json:"worker_name,omitempty"`
}

// 操作是否开启 relay 的请求
type StartRelayRequest struct {

	// relay log 清理策略配置
	Pruge *Purge `json:"pruge,omitempty"`

	// 拉取上游 binlog 的起始 GTID
	RelayBinlogGtid *string `json:"relay_binlog_gtid"`

	// 拉取上游 binlog 的起始文件名
	RelayBinlogName *string `json:"relay_binlog_name"`

	// 存储 relay log 的目录
	RelayDir *string `json:"relay_dir"`

	// woker 的名字，需要全局唯一
	WorkerName *string `json:"worker_name,omitempty"`
}

// SubTaskStatus defines model for SubTaskStatus.
type SubTaskStatus struct {

	// load 单元子任务的状态
	LoadStatus *LoadStatus `json:"load_status,omitempty"`

	// 任务名字
	Name *string `json:"name,omitempty"`

	// 任务当前阶段
	Stage *string `json:"stage,omitempty"`

	// load 单元子任务的状态
	SyncStatus *SyncStatus `json:"sync_status,omitempty"`

	// 任务单元类型
	Unit                *string `json:"unit,omitempty"`
	UnresolvedDdlLockId *string `json:"unresolved_ddl_lock_id,omitempty"`
}

// load 单元子任务的状态
type SyncStatus struct {
	BinlogType *string `json:"binlog_type,omitempty"`

	// sharding DDL which current is blocking
	BlockingDdls        *[]string `json:"blocking_ddls,omitempty"`
	MasterBinlog        *string   `json:"master_binlog,omitempty"`
	MasterBinlogGtid    *string   `json:"master_binlog_gtid,omitempty"`
	RecentTps           *int64    `json:"recent_tps,omitempty"`
	SecondsBehindMaster *int      `json:"seconds_behind_master,omitempty"`
	Synced              *bool     `json:"synced,omitempty"`
	SyncerBinlog        *string   `json:"syncer_binlog,omitempty"`
	SyncerBinlogGtid    *string   `json:"syncer_binlog_gtid,omitempty"`
	TotalEvents         *int64    `json:"total_events,omitempty"`
	TotalTps            *int64    `json:"total_tps,omitempty"`

	// sharding groups which current are un-resolved
	UnresolvedGroups *[]ShardingGroup `json:"unresolved_groups,omitempty"`
}

// 迁移任务
type Task struct {

	// 定义数据源迁移表的过滤规则，可以定义多个规则。如果 DM 版本早于 v2.0.0-beta.2 则使用 black-white-list
	BlockAllowList *[]TaskBlockAllowRule `json:"block_allow_list,omitempty"`

	// schema/table 是否大小写敏感
	CaseSensitive *bool `json:"case_sensitive,omitempty"`

	// 是否清理 dump 阶段产生的文件，包括 metadata 文件、建库建表 SQL 文件以及数据导入 SQL 文件
	CleanDumpFile *bool `json:"clean_dump_file,omitempty"`

	// 游数据库实例匹配的表的 binlog event filter 规则集
	Filters *[]BinlogEventFilterRule `json:"filters,omitempty"`

	// 想要关闭的检查项 默认不关闭任何检查项
	IgnoreCheckingItems *[]TaskIgnoreCheckingItems `json:"ignore_checking_items,omitempty"`

	// load 处理单元的运行配置参数
	LoaderConfigs *[]TaskLoaderConfig `json:"loader_configs,omitempty"`

	// 下游储存 meta 信息的数据库
	MetaSchema *string `json:"meta_schema,omitempty"`

	// dump 处理单元的运行配置参数
	MydumperConfigs *[]TaskMydumperConfig `json:"mydumper_configs,omitempty"`

	// 迁移任务名，需要全局唯一
	Name *string `json:"name,omitempty"`

	// online ddl 的插件
	OnlineDdlScheme *TaskOnlineDdlScheme `json:"online_ddl_scheme"`

	// 上游和下游表之间的路由 table routing 规则集
	Routes *[]TaskRouteRule `json:"routes,omitempty"`

	// 如果为分库分表合并任务则需要配置该项。默认使用悲观协调模式 "pessimistic"，在深入了解乐观协调模式的原理和使用限制后，也可以设置为乐观协调模式 "optimistic"
	ShardMode *TaskShardMode `json:"shard_mode"`

	// task 上游数据源的配置列表
	SourceConfigs *[]TaskSourceConfig `json:"source_configs,omitempty"`

	// sync 处理单元的运行配置参数
	SyncerConfigs *[]TaskSyncerConfig `json:"syncer_configs,omitempty"`

	// 下游数据库配置
	TargetDatabase *TaskTargetDataBase `json:"target_database,omitempty"`

	// 迁移模式
	TaskMode *TaskTaskMode `json:"task_mode,omitempty"`

	// 时区
	Timezone *string `json:"timezone,omitempty"`
}

// 需要忽略的检查项
type TaskIgnoreCheckingItems string

// online ddl 的插件
type TaskOnlineDdlScheme string

// 如果为分库分表合并任务则需要配置该项。默认使用悲观协调模式 "pessimistic"，在深入了解乐观协调模式的原理和使用限制后，也可以设置为乐观协调模式 "optimistic"
type TaskShardMode string

// 迁移模式
type TaskTaskMode string

// 黑白名单规则
type TaskBlockAllowRule struct {

	// 迁移哪些库
	DoDbs *[]string `json:"do_dbs,omitempty"`

	// 迁移哪些表
	DoTables *[]struct {

		// 数据库名
		DbName *string `json:"db_name,omitempty"`

		// 表名
		TblName *string `json:"tbl_name,omitempty"`
	} `json:"do_tables,omitempty"`

	// 忽略哪些库
	IgnoreDbs *[]string `json:"ignore_dbs,omitempty"`

	// 迁移哪些表
	IgnoreTables *[]struct {

		// 数据库名
		DbName *string `json:"db_name,omitempty"`

		// 表名
		TblName *string `json:"tbl_name,omitempty"`
	} `json:"ignore_tables,omitempty"`
}

// load 处理单元的运行配置参数
type TaskLoaderConfig struct {

	// 规则名
	ConfigName *string `json:"config_name,omitempty"`

	// dump 处理单元输出 SQL 文件的目录，同时也是 load 处理单元读取文件的目录。该配置项的默认值为 "./dumped_data"。同实例对应的不同任务必须配置不同的目录
	Dir *string `json:"dir,omitempty"`

	// load 处理单元并发执行 dump 处理单元的 SQL 文件的线程数量，默认值为 16，当有多个实例同时向 TiDB 迁移数据时可根据负载情况适当调小该值
	PoolSize *int `json:"pool_size,omitempty"`
}

// dump 处理单元的运行配置参数
type TaskMydumperConfig struct {

	// dump 处理单元生成的数据文件大小，默认值为 64，单位为 MB
	ChunkFilesize *int `json:"chunk_filesize,omitempty"`

	// 规则名
	ConfigName *string `json:"config_name,omitempty"`

	// dump 处理单元的其他参数，不需要在 extra-args 中配置 table-list，DM 会自动生成
	ExtraArgs *string `json:"extra_args,omitempty"`

	// dump 处理单元从上游数据库实例导出数据的线程数量
	Threads *int `json:"threads,omitempty"`
}

// 上游和下游表之间的路由 table routing 规则
type TaskRouteRule struct {

	// 规则名
	RuleName *string `json:"rule_name,omitempty"`

	// 库名匹配规则，支持通配符 "*" 和 "?"
	SchemaPattern *string `json:"schema_pattern,omitempty"`

	// 表名匹配规则，支持通配符 "*" 和 "?"
	TablePattern *string `json:"table_pattern,omitempty"`

	// 目标库名称
	TargetSchema *string `json:"target_schema,omitempty"`

	// 目标表名称
	TargetTable *string `json:"target_table,omitempty"`
}

// 任务针对数据源的配置
type TaskSourceConfig struct {

	// 该上游数据库实例匹配的表的 block-allow-list 过滤规则名称列表
	BlockAllowList *[]string `json:"block_allow_list,omitempty"`

	// 该上游数据库实例匹配的表的 binlog event filter 规则名称列表
	FilterRules *[]string `json:"filter_rules,omitempty"`

	// mydumpers 配置的名称
	LoaderConfigName *string `json:"loader_config_name,omitempty"`

	// task-mode 为 incremental 且下游数据库的 checkpoint 不存在时 binlog 迁移开始的位置; 如果 checkpoint 存在，则以 checkpoint 为准
	Meta *struct {

		// 对于 source 中指定了 enable-gtid: true 的增量任务，需要指定该值
		BinlogGtid *string `json:"binlog_gtid,omitempty"`
		BinlogName *string `json:"binlog_name,omitempty"`
		BinlogPos  *int    `json:"binlog_pos,omitempty"`
	} `json:"meta,omitempty"`

	// mydumpers 配置的名称
	MydumperConfigName *string `json:"mydumper_config_name,omitempty"`

	// 该上游数据库实例匹配的表到下游数据库的 table routing 规则名称列表
	RouteRules *[]string `json:"route_rules,omitempty"`

	// 数据源名
	SourceName *string `json:"source_name,omitempty"`

	// mydumpers 配置的名称
	SyncerConfigName *string `json:"syncer_config_name,omitempty"`
}

// sync 处理单元的运行配置参数
type TaskSyncerConfig struct {

	// sync 迁移到下游数据库的一个事务批次 SQL 语句数，默认值为 100
	Batch *int `json:"batch,omitempty"`

	// 规则名
	ConfigName *string `json:"config_name,omitempty"`

	// 若 session 中设置 sql-mode: "ANSI_QUOTES"，则需开启此项
	EnableAnsiQuotes *bool `json:"enable_ansi_quotes,omitempty"`

	// dm safe mode 相关操作
	SafeMode *bool `json:"safe_mode,omitempty"`

	// sync 并发迁移 binlog event 的线程数量，默认值为 16，当有多个实例同时向 TiDB 迁移数据时可根据负载情况适当调小该值
	WorkerCount *int `json:"worker_count,omitempty"`
}

// 下游数据库配置
type TaskTargetDataBase struct {

	// 数据源地址
	Host *string `json:"host,omitempty"`

	// 数据库密码
	Password *string `json:"password,omitempty"`

	// 数据源端口
	Port *int `json:"port,omitempty"`

	// 数据源 ssl 配置,从接口获取数据源配置时，该字段会被隐藏
	Security *Security `json:"security"`

	// 设置 TiDB 的 session 变量，在 v1.0.6 版本引入。更多变量及解释参见 https://docs.pingcap.com/zh/tidb/stable/system-variables
	Session *[]struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"session,omitempty"`

	// 数据库用户名
	User *string `json:"user,omitempty"`
}

// 和 worker 相关的请求
type WorkerNameRequest struct {

	// woker 的名字，需要全局唯一
	WorkerName *string `json:"worker_name,omitempty"`
}

// DMAPICreateSourceJSONBody defines parameters for DMAPICreateSource.
type DMAPICreateSourceJSONBody Source

// DMAPIStartRelayJSONBody defines parameters for DMAPIStartRelay.
type DMAPIStartRelayJSONBody StartRelayRequest

// DMAPIStopRelayJSONBody defines parameters for DMAPIStopRelay.
type DMAPIStopRelayJSONBody WorkerNameRequest

// DMAPIStartTaskJSONBody defines parameters for DMAPIStartTask.
type DMAPIStartTaskJSONBody Task

// DMAPICreateSourceJSONRequestBody defines body for DMAPICreateSource for application/json ContentType.
type DMAPICreateSourceJSONRequestBody DMAPICreateSourceJSONBody

// DMAPIStartRelayJSONRequestBody defines body for DMAPIStartRelay for application/json ContentType.
type DMAPIStartRelayJSONRequestBody DMAPIStartRelayJSONBody

// DMAPIStopRelayJSONRequestBody defines body for DMAPIStopRelay for application/json ContentType.
type DMAPIStopRelayJSONRequestBody DMAPIStopRelayJSONBody

// DMAPIStartTaskJSONRequestBody defines body for DMAPIStartTask for application/json ContentType.
type DMAPIStartTaskJSONRequestBody DMAPIStartTaskJSONBody
